processors:
  filter/drop_general:
    error_mode: ignore
    metrics:
      metric:
{% if signals_to_drop %}
{%- for signal_to_drop in signals_to_drop %}
        - 'name == "{{ signal_to_drop.name }}"'
{%- endfor %}
{% endif %}
{%- for signal_to_adjust in signals_to_adjust %}
  filter/m_{{ signal_to_adjust.name }}:
    error_mode: ignore
    metrics:
      metric:
        - 'name != "{{ signal_to_adjust.name }}"'
  interval/m_{{ signal_to_adjust.name }}:
    interval: {{ signal_to_adjust.interval }}
    pass_through:
      gauge: false
      summary: false
{%- endfor %}
{% if signals_to_adjust %}
  filter/m_default:
    error_mode: ignore
    metrics:
      metric:
{%- for signal_to_adjust in signals_to_adjust %}
        - 'name == "{{ signal_to_adjust.name }}"'
{%- endfor %}
{% endif %}
{% if config.counter_default_interval != "" and signals_to_adjust %}
  interval/m_default:
    interval: {{ config.counter_default_interval }}
    pass_through:
      gauge: true
      summary: true
{% elif signals_to_adjust %}
  interval/m_default:
    pass_through:
      gauge: true
      summary: true
{% elif config.counter_default_interval  != "" %}
  interval/m_default:
    interval: {{ config.counter_default_interval }}
    pass_through:
      gauge: true
      summary: true
{% endif %}
pipelines:
{%- for signal_to_adjust in signals_to_adjust %}
  metrics/{{signal_to_adjust.name}}:
    receivers:  [ prometheus ]
    processors: [ filter/drop_general, filter/m_{{signal_to_adjust.name}}, interval/m_{{signal_to_adjust.name}} ]
    exporters:  [ prometheusremotewrite , debug]
{%- endfor %}
  metrics/m_default:
    receivers:  [ prometheus ]
{% if config.counter_default_interval != "" or signals_to_adjust %}
    processors: [ filter/drop_general, filter/m_default, interval/m_default ]
{% else %}
    processors: [ filter/drop_general ]
{% endif %}
    exporters:  [ prometheusremotewrite , debug]

